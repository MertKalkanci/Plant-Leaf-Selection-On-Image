# -*- coding: utf-8 -*-
"""plantcv_leaf_selection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wDifY2AoJ8N4HlNrQ7QN9rTFWFmJjp7k
"""

!pip install plantcv

import sys, traceback
import cv2
import os
import re
import numpy as np
import argparse
import string
from plantcv import plantcv as pcv

mask_type_is_b = True
treshold = 160

pcv.params.debug="plot" #set debug mode
img, path, filename = pcv.readimage("/content/strawberry-field-growing.jpg")


img_size = img.shape

print(img_size)

if np.average(img) < 50:
  pcv.fatal_error("Night Image")
else:
  pass

if mask_type_is_b:
  mask, masked_img = pcv.threshold.custom_range(img=img, lower_thresh=[0,0,treshold],
                                              upper_thresh=[255,255,255], channel='LAB')
else:
  mask, masked_img = pcv.threshold.custom_range(img=img, lower_thresh=[treshold,0,0],
                                              upper_thresh=[255,255,255], channel='LAB')

rois, roi_hierarchy = pcv.roi.circle(img, x=(img_size[1] - 50), y=(img_size[0] - 50),r=50)

masked = pcv.apply_mask(img=img, mask=mask, mask_color='white')

id_objects, obj_hierarchy = pcv.find_objects(img=masked,mask=mask)

roi_objects, hierarchy, kept_mask, obj_area = pcv.roi_objects(img, rois, roi_hierarchy,
                                                              id_objects, obj_hierarchy, 'partial')

pcv.print_image(img=kept_mask, filename='/content/production_files/mask.png')

analysis_images = pcv.watershed_segmentation(rgb_img=masked, mask=kept_mask, distance=15, label="")

height, width, channels = analysis_images.shape
analysis_images = analysis_images[0:height,0:int(width/2)]

pcv.print_image(img=analysis_images, filename='/content/production_files/mask.png')
pcv.plot_image(analysis_images)

# threshold on the specified color
lower=np.array([0,0,240])
upper=np.array([30,30,255])
mask = cv2.inRange(analysis_images, lower, upper)

# change all non-specified color to white
result = analysis_images.copy()
result[mask!=255] = (0, 0, 0)

# save results

img = result
hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
gray_mask_r = pcv.rgb2gray(rgb_img=img)

masked_final = pcv.apply_mask(img=masked_img, mask=gray_mask_r, mask_color="black")

cv2.imwrite(img=masked_final,filename="/content/production_files/full.png")

print(masked_final.shape)

list_y,list_x = [],[]

for i in range(len(masked_final)):
  for j in range(len(masked_final[i])):
    if (masked_final[i][j] != [0,0,0]).any():
      list_y.append(i)
      list_x.append(j)

list_y = np.array(list_y)
list_x = np.array(list_x)

y1 = np.amin(list_y)
x1 = np.amin(list_x)
y2 = np.max(list_y)
x2 = np.max(list_x)

if x2 - x1 > 100:#top handle bugs in vision
  x2 = x1 + 100

height, width, channels = masked_final.shape
pcv.plot_image(masked_final[y1:y2,x1:x2])
cv2.imwrite(img=masked_final[y1:y2,x1:x2],filename='/content/production_files/cut_final.png')